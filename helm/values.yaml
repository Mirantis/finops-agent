# Default values for finops-agent.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ramessesii/forecasting-agent
  pullPolicy: Always
  # Overrides the image tag whose default is the chart appVersion.
  tag: "latest"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 8081
  targetPort: metrics
  name: metrics

resources: {}
  # limits:
  #   cpu: 500m
  #   memory: 512Mi
  # requests:
  #   cpu: 100m
  #   memory: 256Mi

nodeSelector: {}

tolerations: []

affinity: {}

# Configuration for the finops-agent
config:
  # Agent configuration
  agent:
    interval: 300  # seconds between forecast updates
  
  # Collector configuration
  collector:
    type: prometheus
    url: http://kof-mothership-promxy.kof.svc.cluster.local:8082
    lookback_days: 7 
    step: "1h"  # Consistent step size for all queries
    disable_ssl: true
    timeout: 300
    max_retries: 3
    chunk_days: 0.25  # 6 hours for better granular processing

  # Model configuration
  models:
    type: toto
    forecast_horizon: 7 # number of days ahead in future
    quantiles: [0.1, 0.5, 0.9]
    toto:
      checkpoint: Datadog/Toto-Open-Base-1.0
      device: cpu              # or cuda
      context_length: 4096
      num_samples: 256
      compile: true

  # Optimizer configuration
  optimizer:
    idle_threshold: 0.5  # 50% idle threshold
    min_nodes: 1
    min_savings: 100.0   # Minimum daily savings to report
    min_confidence: 0.8
    lookback_days: 7      # Days to analyze for optimization

  # Validation configuration
  validation:
    enabled: false
    interval_cycles: 2  # Run validation every 2 forecast cycles
    train_ratio: 0.7    # Use 70% for training, 30% for testing
    log_level: INFO

  # Metrics configuration
  metrics:
    port: 8081
    host: "0.0.0.0"
    path: /metrics

# Grafana dashboard configuration
grafana:
  enabled: true
  image:
    repository: grafana/grafana
    tag: "10.4.7"
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3001
    targetPort: 3000
  
  # Grafana configuration
  config:
    server:
      http_port: 3000
    security:
      admin_user: admin
      admin_password: finops123  # CAUTION
    
  # Dashboard configuration
  dashboard:
    # Variables for the dashboard
    variables:
      cluster:
        path: "/clusters"
        uql: |
          parse-json
          | mv-expand "clusters"
          | project "clusters"
      node:
        path: "/metrics/{clusters}"
        uql: |
          parse-json
          | jsonata "$distinct($.forecasts[metric.node!='cluster-aggregate'].metric.node)"
  
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
